spring.application.name: cart-service

#spring.datasource.url=jdbc:h2:mem:testdb
#spring.datasource.username=sa
#spring.datasource.password=
#spring.h2.console.enabled=true
#spring.h2.console.path=/h2-console
#spring.jpa.hibernate.ddl-auto=create

# DataSource configuration
spring.datasource.url=jdbc:mysql://localhost:3306/testdb
spring.datasource.username=root
spring.datasource.password=Dontforget#11
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

# Hibernate properties
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQLDialect
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true

#this may change on docker or kubernetes
#eureka.client.serviceUrl.defaultZone=http://localhost:8761/eureka

spring.config.import=optional:configserver:http://localhost:8088

#To enable in  actuator
management.health.circuitbreakers.enabled=true
management.endpoints.web.exposure.include=health
management.endpoint.health.show-details=always

resilience4j.circuitbreaker.instances.productServiceCB.registerHealthIndicator=true

#store and manage events related to the circuit breaker's state transitions and failures
#keep track of the last 10 events
resilience4j.circuitbreaker.instances.productServiceCB.eventConsumerBufferSize=10

#represents the maximum acceptable percentage of failed calls - here 50%
resilience4j.circuitbreaker.instances.productServiceCB.failureRateThreshold=50

#CircuitBreaker will not start evaluating failure rates or transitioning states until at least 5 calls
resilience4j.circuitbreaker.instances.productServiceCB.minimumNumberOfCalls=5

#enable half open after certain duration
resilience4j.circuitbreaker.instances.productServiceCB.automaticTransitionFromOpenToHalfOpenEnabled=true

#wait duration to half open from open
resilience4j.circuitbreaker.instances.productServiceCB.waitDurationInOpenState=5s

#permitted Number Of Calls In Half Open State
resilience4j.circuitbreaker.instances.productServiceCB.permittedNumberOfCallsInHalfOpenState=3

#maintain information about the last 10 calls
resilience4j.circuitbreaker.instances.productServiceCB.slidingWindowSize=10

#maintain information irrespective of time, focuses on count
resilience4j.circuitbreaker.instances.productServiceCB.slidingWindowType=COUNT_BASED

resilience4j.retry.instances.productServiceCB.registerHealthIndicator=true
resilience4j.retry.instances.productServiceCB.maxRetryAttempts=5

#amount of time that the Retry mechanism should wait before making each retry attempt
resilience4j.retry.instances.productServiceCB.waitDuration=10s

resilience4j.ratelimiter.instances.productServiceCB.registerHealthIndicator=false

#control how many requests can be made within a specific time frame
resilience4j.ratelimiter.instances.productServiceCB.limitForPeriod=10

#When the limit refresh period expires, the Rate Limiter will reset the count of 
#requests and start a new rate limit window
resilience4j.ratelimiter.instances.productServiceCB.limitRefreshPeriod=10s
resilience4j.ratelimiter.instances.productServiceCB.timeoutDuration=3s


# Use Jackson for Redis serialization
spring.redis.serializer=org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer
